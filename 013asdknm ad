
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "GRIMOIRE BY NAMELESS SCRIPTS" .. Fluent.Version,
    SubTitle = "",
    TabWidth = 120,
    Size = UDim2.fromOffset(540, 430),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Auto Farm", Icon = "swords" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })


    local isToggleOn = false
    local selectedValue = ""
    
    -- Dropdown creation block
    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Select Option to Auto Skill",
        Values = {"BUDHA", "BARRIER", "FIRE", "SPIN", "SHADOW", "DRAGON", "DOUGH", "UTA", "ICE", "GHOST", "LIGHT", "SAND", "CHOP", "KILO", "SPIN", "SHADOW MONARCH SWORD", "KAMING WRATH", "VENOM DAGGER"},
        Multi = false,
        Default = 1,
    })
    
    Dropdown:SetValue("four")
    
    Dropdown:OnChanged(function(Value)
        selectedValue = Value
        print("Dropdown changed:", selectedValue)
    end)
    
    -- Toggle creation block
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Skill Selected", Default = false })
    
    -- Function to handle actions based on toggle state
    local function HandleToggleAction()
        while isToggleOn do
            print("Toggle changed:", Toggle.Value)
    
            if isToggleOn then
                if selectedValue == "BUDHA" then
                    local args = {
                        [1] = "release"
                    }
                    
                    game:GetService("Players").LocalPlayer.Character.Buddha.Remotes.z:FireServer(unpack(args))
                    wait(0.2)
                    local args = {
                        [1] = "release"
                    }
                    
                    game:GetService("Players").LocalPlayer.Character.Buddha.Remotes.x:FireServer(unpack(args))
                    wait(0.2)
                    local args = {
                        [1] = "release"
                    }
                    
                    game:GetService("Players").LocalPlayer.Character.Buddha.Remotes.c:FireServer(unpack(args))
                    wait(0.2)
                    local args = {
                        [1] = "release"
                    }
                    
                    game:GetService("Players").LocalPlayer.Character.Buddha.Remotes.v:FireServer(unpack(args))
                elseif dropdownValue == "BARRIER" then

                else
                    print("Toggle is ON and unexpected option selected")
                end
            end
            
            wait()
            end
            end
            
            Toggle:OnChanged(function(value)
            isToggleOn = value
            print("Toggle is now:", isToggleOn)
            
            if isToggleOn then
            -- Start the toggle action in a new thread to not block the UI
            spawn(HandleToggleAction)
            end
            end)
            
            if Toggle.Value then
            -- Start the toggle action initially
            spawn(HandleToggleAction)
            end


        -- Addons:
        -- SaveManager (Allows you to have a configuration system)
        -- InterfaceManager (Allows you to have a interface managment system)
        
        -- Hand the library over to our managers
        SaveManager:SetLibrary(Fluent)
        InterfaceManager:SetLibrary(Fluent)
        
        -- Ignore keys that are used by ThemeManager.
        -- (we dont want configs to save themes, do we?)
        SaveManager:IgnoreThemeSettings()
        
        -- You can add indexes of elements the save manager should ignore
        SaveManager:SetIgnoreIndexes({})
        
        -- use case for doing it this way:
        -- a script hub could have themes in a global folder
        -- and game configs in a separate folder per game
        InterfaceManager:SetFolder("FluentScriptHub")
        SaveManager:SetFolder("FluentScriptHub/specific-game")
        
        InterfaceManager:BuildInterfaceSection(Tabs.Settings)
        SaveManager:BuildConfigSection(Tabs.Settings)
        
        
        Window:SelectTab(1)
        
        Fluent:Notify({
            Title = "Fluent",
            Content = "The script has been loaded.",
            Duration = 8
        })
        
        -- You can use the SaveManager:LoadAutoloadConfig() to load a config
        -- which has been marked to be one that auto loads!
        SaveManager:LoadAutoloadConfig()
